<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Net" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file=".\License.tt" #>
<#@ include file=".\Vk.ttinclude" #>
<#
	var parser = GetParser();
	var generator = new TypeGenerator();

	var types = generator.Generate(parser.Run());
#>
using System;

namespace SharpVk
{
<#
foreach(var delegateType in types.Delegates)
{
#>
    /// <summary>
<#
	foreach(var line in delegateType.Comment)
    {
#>
    /// <para>
    /// <#=line#>
    /// </para>
<#
	}
#>
    /// </summary>
	public delegate <#=delegateType.ReturnTypeName#> <#=delegateType.Name#>(<# bool isFirst = true; foreach(var param in delegateType.Parameters) { if(isFirst) { isFirst = false; } else { #>, <#  } #><#=param.TypeName#> <#=param.Name#><# } #>);
<#
}
#>
}