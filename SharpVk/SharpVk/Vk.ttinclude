<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="$(SolutionDir)Lib\SharpVk.VkXml.dll" #>
<#@ assembly name="$(SolutionDir)Lib\SharpVk.SpirvJson.dll" #>
<#@ import namespace="Microsoft.CSharp" #>
<#@ import namespace="SharpVk.VkXml" #>
<#@ import namespace="SharpVk.SpirvJson" #>
<#@ import namespace="System.CodeDom" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Net" #>
<#@ import namespace="System.Xml.Linq" #>
<#+

Dictionary<string, string> baseTypes = new Dictionary<string, string>()
{
    {"Bool32", "bool"},
	{"DeviceSize", "ulong"},
	{"SampleMask", "uint"}
};

string[] extensionSuffixes = new[]{"KHR", "EXT"};

private static CSharpCodeProvider codeDomCompiler = new CSharpCodeProvider();

private static VkXmlCache xmlCache;
private static SpirvJsonCache jsonCache;

string GetTypeName(Type type)
{
	var codeDomType = new CodeTypeReference(type);

	return codeDomCompiler.GetTypeOutput(codeDomType);
}
 
XDocument GetVkXml()
{
	if(xmlCache == null)
	{
		xmlCache = new VkXmlCache(Path.Combine(Host.ResolvePath("."), "obj\\VkTemplates"));
    }

    return xmlCache.GetVkXml();
}

SpecParser GetParser()
{
	GetVkXml();

	return new SpecParser(xmlCache, Path.Combine(Host.ResolvePath("."), "obj\\VkTemplates"));
}

string MapBaseTypeName(string baseTypeName)
{
	return baseTypes[baseTypeName];
}
 
SpirvModel GetSpirvModel()
{
	if(jsonCache == null)
	{
		jsonCache = new SpirvJsonCache(Path.Combine(Host.ResolvePath("."), "obj\\VkTemplates"));
    }

    return jsonCache.GetSpirvModel();
}
#>