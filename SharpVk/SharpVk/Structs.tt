<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Net" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file=".\License.tt" #>
<#@ include file=".\Vk.ttinclude" #>
<#
	var parser = GetParser();
	var generator = new TypeGenerator();

	var types = generator.Generate(parser.Run());
#>
using System;
using System.Runtime.InteropServices;
using System.Text;

namespace SharpVk
{
	/// <summary>
	/// -
	/// </summary>
	public struct SampleMask
	{
		private uint value;
		
		/// <summary>
		/// -
		/// </summary>
		public static implicit operator SampleMask(uint value)
		{
			return new SampleMask { value = value };
		}
		
		/// <summary>
		/// -
		/// </summary>
		public static implicit operator uint(SampleMask size)
		{
			return size.value;
		}
		
		/// <summary>
		/// -
		/// </summary>
		public override string ToString()
		{
			return this.value.ToString();
		}
	}
	
	/// <summary>
	/// -
	/// </summary>
	public struct Bool32
	{
		private uint value;
		
		/// <summary>
		/// -
		/// </summary>
		public Bool32(bool value)
		{
			this.value = value
							? Constants.True
							: Constants.False;
		}
		
		/// <summary>
		/// -
		/// </summary>
		public static implicit operator Bool32(bool value)
		{
			return new Bool32(value);
		}
		
		/// <summary>
		/// -
		/// </summary>
		public static implicit operator bool(Bool32 value)
		{
			return value.value != Constants.False;
		}
		
		/// <summary>
		/// -
		/// </summary>
		public override string ToString()
		{
			return ((bool)this).ToString();
		}
	}
	
	/// <summary>
	/// -
	/// </summary>
	public struct DeviceSize
	{
		private ulong value;
		
		/// <summary>
		/// -
		/// </summary>
		public static implicit operator DeviceSize(int value)
		{
			return new DeviceSize { value = (ulong)value };
		}
		
		/// <summary>
		/// -
		/// </summary>
		public static implicit operator DeviceSize(ulong value)
		{
			return new DeviceSize { value = value };
		}
		
		/// <summary>
		/// -
		/// </summary>
		public static implicit operator ulong(DeviceSize size)
		{
			return size.value;
		}
		
		/// <summary>
		/// -
		/// </summary>
		public override string ToString()
		{
			return this.value.ToString();
		}
	}

	public partial struct ComponentMapping
	{
		/// <summary>
		/// Returns a default ComponentMapping of Identity for all components.
		/// </summary>
		public static ComponentMapping Identity
		{
			get
			{
				return new ComponentMapping
					{
						R = ComponentSwizzle.Identity,
						G = ComponentSwizzle.Identity,
						B = ComponentSwizzle.Identity,
						A = ComponentSwizzle.Identity
					};
			}
		}
	}
<#
	foreach(var structType in types.Structs)
	{
#>

    /// <summary>
<#
	foreach(var line in structType.Comment)
    {
#>
	/// <para>
    /// <#=line#>
	/// </para>
<#
	}
#>
    /// </summary>
    [StructLayout(LayoutKind.Sequential)]
	public partial struct <#=structType.Name#>
	{
<#
		foreach(var member in structType.Members)
        {
#>
	   /// <summary>
<#
			foreach(var line in member.Comment)
			{
#>
		/// <para>
		/// <#=line#>
		/// </para>
<#
			}
#>
		/// </summary>
		public <#=member.TypeName#> <#=member.Name#>;

<#
        }
#>
		/// <summary>
		/// -
		/// </summary>
		public override string ToString()
		{
			var builder = new StringBuilder();
			
            builder.AppendLine("<#=structType.Name#>");
            builder.AppendLine("{");
<#
		foreach(var member in structType.Members)
        {
#>
            builder.AppendLine($"<#=member.Name#>: {this.<#=member.Name#>}");
<#
        }
#>
            builder.Append("}");

			return builder.ToString();
		}
	}
<#
	}
#>
}