<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Net" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file=".\Vk.ttinclude" #>
<#
	var vkXml = GetVkXml();
#>
using System;

namespace SharpVk
{
<#
	foreach(var enumeration in vkXml.Element("registry").Elements("enums"))
	{
		if(enumeration.Attribute("type") != null)
        {
			string enumName = MapTypeName(enumeration.Attribute("name").Value);
			string prefix = "";

			if(enumeration.Attribute("expand") != null)
            {
				prefix = enumeration.Attribute("expand").Value + "_";
            }
#>
	public enum <#=enumName#>
	{
<#
			foreach(var enumerationField in enumeration.Elements("enum"))
			{
				string fieldName = enumerationField.Attribute("name").Value;

				if(fieldName.StartsWith(prefix))
                {
					fieldName = fieldName.Substring(prefix.Length);
                }

				var nameParts = fieldName.Split('_');

				fieldName = string.Join("", nameParts.Select(x => char.ToUpper(x[0]) + x.Substring(1).ToLower()));

				if(char.IsDigit(fieldName[0]))
                {
					fieldName = "_" + fieldName;
                }

				string fieldValue = "0";

				if(enumerationField.Attribute("value") != null)
                {
					fieldValue = enumerationField.Attribute("value").Value;
                }
				else
                {
					fieldValue = "1 << " + enumerationField.Attribute("bitpos").Value;
                }
#>
		<#=fieldName#> = <#=fieldValue#>,
<#
			}
#>
	}

<#
        }
	}
#>
}