<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Net" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file="..\License.tt" #>
<#@ include file="..\Vk.ttinclude" #>
<#
	var model = GetSpirvGrammar();
#>
using System.Collections.Generic;
using System.Linq;

namespace SharpVk.Spirv
{
    /// <summary>
    /// Represents the metadata for a SharpVk.Spirv.Op value.
    /// </summary>
	public struct OpCode
	{
		/// <summary>
		/// The SharpVk.Spirv.Op value described by this instance.
		/// </summary>
		public Op Op
		{
			get;
			private set;
		}

		/// <summary>
		/// -
		/// </summary>
		public IEnumerable<Operand> Operands
		{
			get;
			private set;
		}
		
		/// <summary>
		/// -
		/// </summary>
        public static readonly Dictionary<Op, OpCode> Lookup;

        static OpCode()
        {
            OpCode.Lookup = typeof(OpCode).GetFields(System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static)
                            .Where(x => x.FieldType == typeof(OpCode))
                            .Select(x => (OpCode)x.GetValue(null))
                            .ToDictionary(x => x.Op);
        }
<#
foreach(var instruction in model.Instructions)
{
#>

		/// <summary>
		/// -
		/// </summary>
		public static readonly OpCode <#=instruction.OpName#> = new OpCode
		{
			Op = Op.<#=instruction.OpName#>,
			Operands = new Operand[]
			{
<#
	if(instruction.Operands != null)
	foreach(var operand in instruction.Operands)
	{
#>
				new Operand
				{
					Kind = OperandKind.<#=operand.Kind#>,
					Quantifier = Quantifier.<#= operand.Quantifier == "*" ? "Multiple" : operand.Quantifier == "?" ? "Optional" : "None" #>,
					Name = "<#= (operand.Name ?? "").Replace("\n", "") #>"
				},
<#
	}
#>
			}
		};
<#
}
#>
	}
	
	/// <summary>
	/// -
	/// </summary>
	public struct Operand
	{
		/// <summary>
		/// -
		/// </summary>
		public OperandKind Kind
		{
			get;
			internal set;
		}
		
		/// <summary>
		/// -
		/// </summary>
		public Quantifier Quantifier
		{
			get;
			internal set;
		}
		
		/// <summary>
		/// -
		/// </summary>
		public string Name
		{
			get;
			internal set;
		}
	}
	
	/// <summary>
	/// -
	/// </summary>
	public enum Quantifier
	{
		/// <summary>
		/// -
		/// </summary>
		None,
		/// <summary>
		/// -
		/// </summary>
		Optional,
		/// <summary>
		/// -
		/// </summary>
		Multiple
	}
	
	/// <summary>
	/// -
	/// </summary>
	public class OperandKind
	{
<#
foreach(var operandKind in model.Operand_Kinds)
{
#>
		/// <summary>
		/// -
		/// </summary>
		public static readonly OperandKind <#=operandKind.Kind#> = new OperandKind
		{
		};

<#
}
#>
	}
}