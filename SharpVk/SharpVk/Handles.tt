<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file=".\License.tt" #>
<#@ include file=".\Vk.ttinclude" #>
using System;

namespace SharpVk
{
<#
var parser = GetParser();
var generator = new TypeGenerator();

var types = generator.Generate(parser.Run());

foreach(var handle in types.Handles)
{
#>
	public class <#=handle.Name#>
	{
		internal readonly Interop.<#=handle.Name#> handle;

<#
	if(handle.ParentHandle != null)
    {
#>
		private readonly <#=handle.ParentHandle#> parent;

		internal <#=handle.Name#>(Interop.<#=handle.Name#> handle, <#=handle.ParentHandle#> parent)
		{
			this.handle = handle;
			this.parent = parent;
		}
<#
    }
	else
    {
#>
		internal <#=handle.Name#>(Interop.<#=handle.Name#> handle)
		{
			this.handle = handle;
		}
<#
    }
#>
<#
	foreach(var method in handle.Methods)
    {
#>

		public <#if(method.IsStatic)#>static <#;#><#=method.ReturnTypeName#> <#=method.Name#>(<#
		bool previousParamSet = false;

		foreach(var param in method.Parameters)
		{
			if(previousParamSet && param.Name != null)
			{
				#>, <#
			}

			if(param.Name != null)
			{
				#><#=param.TypeName#> <#=param.Name#><#

				previousParamSet = true;
			}
		}
				#>)
		{
			unsafe
			{
<#
		if(method.ReturnTypeName != "void")
		{
#>				<#=method.ReturnTypeName#> result = default(<#=method.ReturnTypeName#>);

<#
		}
#>
<#
		foreach(var statement in method.MarshalToStatements)
		{
#>				<#=statement#>
<#
		}

		bool isFirst;

		if(method.IsDoubleInvoke)
		{
#>
				Interop.Commands.<#=method.CommandName#>(<#
			isFirst = true;

			foreach(var param in method.Parameters)
			{
				if(isFirst)
				{
					isFirst = false;
				}
				else
				{
#>, <#
				}
#><#=param.PreInvokeArgumentName ?? param.ArgumentName#><#
			}
				#>);

<#
		}

		foreach(var statement in method.MarshalMidStatements)
		{
#>				<#=statement#>
<#
		}
#>

				Interop.Commands.<#=method.CommandName#>(<#
		isFirst = true;

		foreach(var param in method.Parameters)
		{
			if(isFirst)
			{
				isFirst = false;
			}
			else
			{
#>, <#
			}
#><#=param.ArgumentName#><#
		}
				#>);

<#
		foreach(var statement in method.MarshalFromStatements)
		{
#>				<#=statement#>
<#
		}
#>

				Interop.HeapUtil.FreeLog();
<#
		if(method.ReturnTypeName != "void")
		{
#>

				return result;
<#
		}
#>
			}
		}
<#
    }
#>

		internal Interop.<#=handle.Name#> Pack()
		{
			return this.handle;
		}
	}

<#
}
#>
}