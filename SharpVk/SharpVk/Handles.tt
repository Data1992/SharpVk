<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file=".\License.tt" #>
<#@ include file=".\Vk.ttinclude" #>

namespace SharpVk
{
<#
var vkXml = GetVkXml();

foreach(var handle in GetHandles())
{
#>
	public class <#=handle.Name#>
	{
		private Interop.<#=handle.Name#> handle;
<#
	var keywords = new[]{"object", "event"};

	var commands = GetCommands();

	var createCommand = commands.FirstOrDefault(x => x.Name == "vkCreate" + handle.Name && x.Params.First().Type.Category != Category.handle);

	if(createCommand != null)
	{
#>

		public <#=handle.Name#>(<#
	bool isFirst = true;

	int paramCount = createCommand.Params.Count();

	foreach(var parameter in createCommand.Params.Take(paramCount - 1))
    {
		string paramName = parameter.Name;

			int pointerCount = 0;
			
			while(paramName[0] == 'p' && (paramName[1] == 'p' || char.IsUpper(paramName[1])))
			{
				pointerCount++;

				paramName = paramName.Substring(1);
            }

			if(pointerCount > 0)
            {
				paramName = paramName = char.ToLower(paramName[0]) + paramName.Substring(1);
            }

			var paramType = parameter.Type;
			
			string paramTypeName = paramType.Name;

			if(keywords.Contains(paramName))
            {
				paramName = "@" + paramName;
            }

			if(isFirst)
            {
				isFirst = false;
            }
			else
            {
				#>, <#
            }
			
			#><#=paramTypeName#> <#=paramName#><#
    }
		#>)
		{
			unsafe
			{
				Interop.<#=handle.Name#> newHandle;
<#
	isFirst = true;

	var arguments = new List<string>();

	foreach(var parameter in createCommand.Params.Take(paramCount - 1))
    {
		string paramName = parameter.Name;

			int pointerCount = 0;
			
			while(paramName[0] == 'p' && (paramName[1] == 'p' || char.IsUpper(paramName[1])))
			{
				pointerCount++;

				paramName = paramName.Substring(1);
            }

			//bool isOutput = !parameter.Value.StartsWith("const") && pointerCount > 0;

			if(pointerCount > 0)
            {
				paramName = char.ToLower(paramName[0]) + paramName.Substring(1);
            }

			var paramType = parameter.Type;

			string paramTypeName = paramType.Name;

			string marshalledParamName = "marshalled" + char.ToUpper(paramName[0]) + paramName.Substring(1);

			if(paramType.Category == Category.@struct && !paramType.IsSimpleStruct)
            {
				arguments.Add(string.Format("{0} == null ? null : &{1}, ", paramName, marshalledParamName));
				paramName = "(" + paramName + "?.MarshalTo()).GetValueOrDefault()";
            }
			else
			{
				arguments.Add(paramName + ", ");
			}
#>
				var <#=marshalledParamName#> = <#=paramName#>;
<#
    }

	string argumentsString = string.Join("", arguments);
		#>
				Result createResult = Interop.Commands.<#=createCommand.Name#>(<#=argumentsString#>&newHandle);

				ResultUtil.HandleResult(createResult);

				this.handle = newHandle;
			}
		}
<#
	}
#>
	}

<#
}
#>
}