<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file=".\License.tt" #>
<#@ include file=".\Vk.ttinclude" #>
using System;

namespace SharpVk
{
<#
var parser = GetParser();
var generator = new TypeGenerator();

var types = generator.Generate(parser.Run());

foreach(var handle in types.Handles)
{
#>
	public class <#=handle.Name#>
	{
		private readonly Interop.<#=handle.Name#> handle;

<#
	if(handle.ParentHandle != null)
    {
#>
		private readonly <#=handle.ParentHandle#> parent;

		internal <#=handle.Name#>(Interop.<#=handle.Name#> handle, <#=handle.ParentHandle#> parent)
		{
			this.handle = handle;
			this.parent = parent;
		}
<#
    }
	else
    {
#>
		internal <#=handle.Name#>(Interop.<#=handle.Name#> handle)
		{
			this.handle = handle;
		}
<#
    }
#>
		internal Interop.<#=handle.Name#> MarshalTo()
		{
			return this.handle;
		}
	}

	internal static class <#=handle.Name#>Extensions
	{
		internal unsafe static Interop.<#=handle.Name#>* MarshalTo(this <#=handle.Name#>[] values)
		{
			throw new NotImplementedException();
		}
	}

<#
}
#>
}