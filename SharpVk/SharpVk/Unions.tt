<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Net" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file=".\License.tt" #>
<#@ include file=".\Vk.ttinclude" #>
<#
	var parser = GetParser();
	var generator = new TypeGenerator();

	var types = generator.Generate(parser.Run());
#>
using GlmSharp;
using System.Runtime.InteropServices;

namespace SharpVk
{
<#
	foreach(var structType in types.Unions)
	{
#>
	/// <summary>
	/// -
	/// </summary>
	[StructLayout(LayoutKind.Explicit)]
	public struct <#=structType.Name#>
	{
<#
		foreach(var member in structType.Members)
        {
#>
		/// <summary>
		/// -
		/// </summary>
		[FieldOffset(<#=member.FieldOffset#>)]
		public <#=member.TypeName#> <#=member.Name#>;
		
		/// <summary>
		/// -
		/// </summary>
        public static implicit operator <#=structType.Name#>(<#=member.TypeName#> value)
        {
            return new <#=structType.Name#>
            {
                <#=member.Name#> = value
            };
        }

<#
        }
#>
	}

<#
	}
#>
}