<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Net" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file=".\License.tt" #>
<#@ include file=".\Vk.ttinclude" #>
<#
	var parser = GetParser();
	var generator = new TypeGenerator();

	var types = generator.Generate(parser.Run());
#>
using System;
using System.Runtime.InteropServices;

namespace SharpVk
{
<#
	foreach(var structType in types.Unions)
	{
#>
    /// <summary>
<#
	foreach(var line in structType.Comment)
    {
#>
	/// <para>
    /// <#=line#>
	/// </para>
<#
	}
#>
    /// </summary>
	[StructLayout(LayoutKind.Explicit)]
	public unsafe partial struct <#=structType.Name#>
	{
<#
		foreach(var member in structType.Members)
        {
			if(member.FixedSize > 0)
			{
#>
		[FieldOffset(<#=member.FieldOffset#>)]
		private fixed <#=member.TypeName#> <#=member.Name#>[<#=member.FixedSize#>];
		
		/// <summary>
		/// Implicit conversion of <#=member.TypeName#>[] to <#=structType.Name#>.
		/// </summary>
        /// <param name="<#=member.Name#>">
<#
				foreach(var line in member.Comment)
				{
#>
		/// <para>
		/// <#=line#>
		/// </para>
<#
				}
#>
        /// </param>
        public static implicit operator <#=structType.Name#>(<#=member.TypeName#>[] <#=member.Name#>)
        {
            var result = new <#=structType.Name#>();

            MemUtil.WriteToPtr(new IntPtr(result.<#=member.Name#>), <#=member.Name#>, 0, <#=member.FixedSize#>);

            return result;
        }

<#
			}
			else
			{
#>
		[FieldOffset(<#=member.FieldOffset#>)]
		private <#=member.TypeName#> <#=member.Name#>;
		
		/// <summary>
		/// Implicit converion of <#=member.TypeName#> to <#=structType.Name#>.
		/// </summary>
        public static implicit operator <#=structType.Name#>(<#=member.TypeName#> value)
        {
            return new <#=structType.Name#>
            {
                <#=member.Name#> = value
            };
        }

<#
			}
        }
#>
	}

<#
	}
#>
}