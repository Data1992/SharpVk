// The MIT License (MIT)
// 
// Copyright (c) Andrew Armstrong/FacticiusVir 2016
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// This file was automatically generated and should not be edited directly.

using System;

namespace SharpVk
{
    /// <summary>
    /// <para>
    /// Bitmask specifying queried pipeline statistics.
    /// </para>
    /// <para>
    /// These bits have the following meanings:
    /// </para>
    /// <para>
    /// * If ename:VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT is
    /// set, queries managed by the pool will count the number of vertices
    /// processed by the &lt;&lt;drawing,input assembly&gt;&gt; stage. Vertices
    /// corresponding to incomplete primitives may: contribute to the count. *
    /// If ename:VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT is
    /// set, queries managed by the pool will count the number of primitives
    /// processed by the &lt;&lt;drawing,input assembly&gt;&gt; stage. If
    /// primitive restart is enabled, restarting the primitive topology has no
    /// effect on the count. Incomplete primitives may: be counted. * If
    /// ename:VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT is set,
    /// queries managed by the pool will count the number of vertex shader
    /// invocations. This counter's value is incremented each time a vertex
    /// shader is &lt;&lt;shaders-vertex-execution,invoked&gt;&gt;. * If
    /// ename:VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT is
    /// set, queries managed by the pool will count the number of geometry
    /// shader invocations. This counter's value is incremented each time a
    /// geometry shader is &lt;&lt;shaders-geometry-execution,invoked&gt;&gt;.
    /// In the case of &lt;&lt;geometry-invocations,instanced geometry
    /// shaders&gt;&gt;, the geometry shader invocations count is incremented
    /// for each separate instanced invocation. * If
    /// ename:VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT is
    /// set, queries managed by the pool will count the number of primitives
    /// generated by geometry shader invocations. The counter's value is
    /// incremented each time the geometry shader emits a primitive. Restarting
    /// primitive topology using the SPIR-V instructions code:OpEndPrimitive or
    /// code:OpEndStreamPrimitive has no effect on the geometry shader output
    /// primitives count. * If
    /// ename:VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT is set,
    /// queries managed by the pool will count the number of primitives
    /// processed by the &lt;&lt;vertexpostproc-clipping,Primitive
    /// Clipping&gt;&gt; stage of the pipeline. The counter's value is
    /// incremented each time a primitive reaches the primitive clipping stage.
    /// * If ename:VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT is set,
    /// queries managed by the pool will count the number of primitives output
    /// by the &lt;&lt;vertexpostproc-clipping,Primitive Clipping&gt;&gt; stage
    /// of the pipeline. The counter's value is incremented each time a
    /// primitive passes the primitive clipping stage. The actual number of
    /// primitives output by the primitive clipping stage for a particular
    /// input primitive is implementation-dependent but must: satisfy the
    /// following conditions: ** If at least one vertex of the input primitive
    /// lies inside the clipping volume, the counter is incremented by one or
    /// more. ** Otherwise, the counter is incremented by zero or more. * If
    /// ename:VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT is
    /// set, queries managed by the pool will count the number of fragment
    /// shader invocations. The counter's value is incremented each time the
    /// fragment shader is &lt;&lt;shaders-fragment-execution,invoked&gt;&gt;.
    /// * If
    /// ename:VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT is
    /// set, queries managed by the pool will count the number of patches
    /// processed by the tessellation control shader. The counter's value is
    /// incremented once for each patch for which a tessellation control shader
    /// is &lt;&lt;shaders-tessellation-control-execution,invoked&gt;&gt;. * If
    /// ename:VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT is
    /// set, queries managed by the pool will count the number of invocations
    /// of the tessellation evaluation shader. The counter's value is
    /// incremented each time the tessellation evaluation shader is
    /// &lt;&lt;shaders-tessellation-evaluation-execution,invoked&gt;&gt;. * If
    /// ename:VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT is
    /// set, queries managed by the pool will count the number of compute
    /// shader invocations. The counter's value is incremented every time the
    /// compute shader is invoked. Implementations may: skip the execution of
    /// certain compute shader invocations or execute additional compute shader
    /// invocations for implementation-dependent reasons as long as the results
    /// of rendering otherwise remain unchanged.
    /// </para>
    /// <para>
    /// These values are intended to measure relative statistics on one
    /// implementation. Various device architectures will count these values
    /// differently. Any or all counters may: be affected by the issues
    /// described in &lt;&lt;queries-operation-undefined,Query
    /// Operation&gt;&gt;.
    /// </para>
    /// <para>
    /// [NOTE] .Note ==== For example, tile-based rendering devices may: need
    /// to replay the scene multiple times, affecting some of the counts. ====
    /// </para>
    /// <para>
    /// If a pipeline has pname:rasterizerDiscardEnable enabled,
    /// implementations may: discard primitives after the final vertex
    /// processing stage. As a result, if pname:rasterizerDiscardEnable is
    /// enabled, the clipping input and output primitives counters may: not be
    /// incremented.
    /// </para>
    /// <para>
    /// When a pipeline statistics query finishes, the result for that query is
    /// marked as available. The application can: copy the result to a buffer
    /// (via fname:vkCmdCopyQueryPoolResults), or request it be put into host
    /// memory (via fname:vkGetQueryPoolResults).
    /// </para>
    /// </summary>
    [Flags]
    public enum QueryPipelineStatisticFlags
    {
        /// <summary>
        /// -
        /// </summary>
        None = 0, 
        
        /// <summary>
        /// Optional
        /// </summary>
        InputAssemblyVertices = 1 << 0, 
        
        /// <summary>
        /// Optional
        /// </summary>
        InputAssemblyPrimitives = 1 << 1, 
        
        /// <summary>
        /// Optional
        /// </summary>
        VertexShaderInvocations = 1 << 2, 
        
        /// <summary>
        /// Optional
        /// </summary>
        GeometryShaderInvocations = 1 << 3, 
        
        /// <summary>
        /// Optional
        /// </summary>
        GeometryShaderPrimitives = 1 << 4, 
        
        /// <summary>
        /// Optional
        /// </summary>
        ClippingInvocations = 1 << 5, 
        
        /// <summary>
        /// Optional
        /// </summary>
        ClippingPrimitives = 1 << 6, 
        
        /// <summary>
        /// Optional
        /// </summary>
        FragmentShaderInvocations = 1 << 7, 
        
        /// <summary>
        /// Optional
        /// </summary>
        TessellationControlShaderPatches = 1 << 8, 
        
        /// <summary>
        /// Optional
        /// </summary>
        TessellationEvaluationShaderInvocations = 1 << 9, 
        
        /// <summary>
        /// Optional
        /// </summary>
        ComputeShaderInvocations = 1 << 10, 
    }
}
