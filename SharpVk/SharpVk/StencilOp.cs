// The MIT License (MIT)
// 
// Copyright (c) Andrew Armstrong/FacticiusVir 2017
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// This file was automatically generated and should not be edited directly.

using System;

namespace SharpVk
{
    /// <summary>
    /// <para>
    /// Stencil comparison function.
    /// </para>
    /// <para>
    /// For purposes of increment and decrement, the stencil bits are
    /// considered as an unsigned integer.
    /// </para>
    /// <para>
    /// If the stencil test fails, the sample's coverage bit is cleared in the
    /// fragment. If there is no stencil framebuffer attachment, stencil
    /// modification cannot: occur, and it is as if the stencil tests always
    /// pass.
    /// </para>
    /// <para>
    /// If the stencil test passes, the pname:writeMask member of the
    /// slink:VkStencilOpState structures controls how the updated stencil
    /// value is written to the stencil framebuffer attachment.
    /// </para>
    /// <para>
    /// The least significant [eq]#s# bits of pname:writeMask, where [eq]#s# is
    /// the number of bits in the stencil framebuffer attachment, specify an
    /// integer mask. Where a [eq]#1# appears in this mask, the corresponding
    /// bit in the stencil value in the depth/stencil attachment is written;
    /// where a [eq]#0# appears, the bit is not written. The pname:writeMask
    /// value uses either the front-facing or back-facing state based on the
    /// facing-ness of the fragment. Fragments generated by front-facing
    /// primitives use the front mask and fragments generated by back-facing
    /// primitives use the back mask.
    /// </para>
    /// </summary>
    public enum StencilOp
    {
        /// <summary>
        /// ename:VK_STENCIL_OP_KEEP keeps the current value.
        /// </summary>
        Keep = 0, 
        
        /// <summary>
        /// ename:VK_STENCIL_OP_ZERO sets the value to 0.
        /// </summary>
        Zero = 1, 
        
        /// <summary>
        /// ename:VK_STENCIL_OP_REPLACE sets the value to pname:reference.
        /// </summary>
        Replace = 2, 
        
        /// <summary>
        /// ename:VK_STENCIL_OP_INCREMENT_AND_CLAMP increments the current
        /// value and clamps to the maximum representable unsigned value.
        /// </summary>
        IncrementAndClamp = 3, 
        
        /// <summary>
        /// ename:VK_STENCIL_OP_DECREMENT_AND_CLAMP decrements the current
        /// value and clamps to 0.
        /// </summary>
        DecrementAndClamp = 4, 
        
        /// <summary>
        /// ename:VK_STENCIL_OP_INVERT bitwise-inverts the current value.
        /// </summary>
        Invert = 5, 
        
        /// <summary>
        /// ename:VK_STENCIL_OP_INCREMENT_AND_WRAP increments the current value
        /// and wraps to 0 when the maximum value would have been exceeded.
        /// </summary>
        IncrementAndWrap = 6, 
        
        /// <summary>
        /// ename:VK_STENCIL_OP_DECREMENT_AND_WRAP decrements the current value
        /// and wraps to the maximum possible value when the value would go
        /// below 0.
        /// </summary>
        DecrementAndWrap = 7, 
    }
}
