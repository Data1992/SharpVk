<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Net" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file=".\License.tt" #>
<#@ include file=".\Vk.ttinclude" #>
using System;
using System.Runtime.InteropServices;

namespace SharpVk
{
	internal unsafe static class MarshalExtensions
	{
        internal static void* MarshalTo(this IntPtr value)
        {
            return value.ToPointer();
        }

        internal static char* MarshalTo(this string value)
        {
            return Interop.HeapUtil.MarshalStringToPointer(value);
        }

        internal static char** MarshalTo(this string[] value)
        {
			throw new NotImplementedException();
        }

        internal static SampleMask* MarshalTo(this SampleMask[] value)
        {
			throw new NotImplementedException();
        }

        internal static uint* MarshalTo(this uint[] values)
		{
            return Interop.HeapUtil.MarshalArrayToPointer(values);
		}

        internal static float* MarshalTo(this float[] values)
		{
            return Interop.HeapUtil.MarshalArrayToPointer(values);
		}

        internal static byte* MarshalTo(this byte[] values)
		{
            return Interop.HeapUtil.MarshalArrayToPointer(values);
		}
	}
<#
var parser = GetParser();
var generator = new TypeGenerator();

var types = generator.Generate(parser.Run());

foreach(var classType in types.Classes)
{
#>

	public class <#=classType.Name#>
	{
<#
	foreach(var classProperty in classType.Properties)
	{
#>
		public <#=classProperty.TypeName#> <#=classProperty.Name#>
		{
			get;
			set;
		}

<#
	}
#>
        internal unsafe Interop.<#=classType.Name#> Pack()
        {
            var result = new Interop.<#=classType.Name#>();
<#
	foreach(var classProperty in classType.Properties)
	{
#>
			result.<#=classProperty.Name#> = this.<#=classProperty.Name#><#if(classProperty.RequiresMarshalling){#>.MarshalTo()<#}else if(classProperty.RequiresPacking){#>.Pack()<#}#>;
<#
	}
#>

            return result;
        }

		internal unsafe Interop.<#=classType.Name#>* MarshalTo()
        {
            IntPtr pointer = Marshal.AllocHGlobal(Marshal.SizeOf<Interop.<#=classType.Name#>>());

            Marshal.StructureToPtr(this.Pack(), pointer, false);

            return (Interop.<#=classType.Name#>*)pointer.ToPointer();
		}
	}

	internal static class <#=classType.Name#>Extensions
	{
		internal unsafe static Interop.<#=classType.Name#>* MarshalTo(this <#=classType.Name#>[] values)
		{
			throw new NotImplementedException();
		}
	}
<#
}
#>
}