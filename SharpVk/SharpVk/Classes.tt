<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Net" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file=".\License.tt" #>
<#@ include file=".\Vk.ttinclude" #>
using System;

namespace SharpVk
{
<#
var parser = GetParser();
var generator = new TypeGenerator();

var types = generator.Generate(parser.Run());

foreach(var classType in types.Classes)
{
#>

	public struct <#=classType.Name#>
	{
<#
	foreach(var classProperty in classType.Properties)
	{
#>

		public <#=classProperty.TypeName#> <#=classProperty.Name#>
		{
			get;
			set;
		}
<#
	}

	if(!classType.IsOutput)
	{
#>

        internal unsafe Interop.<#=classType.Name#> Pack()
        {
            var result = new Interop.<#=classType.Name#>();
<#
	foreach(var statement in classType.MarshalToStatements)
	{
#>
			<#=statement#>
<#
	}
#>

            return result;
        }

		internal unsafe Interop.<#=classType.Name#>* MarshalTo()
        {
            return (Interop.<#=classType.Name#>*)Interop.HeapUtil.AllocateAndMarshal(this.Pack()).ToPointer();
		}
<#
	}
	else
	{
#>

		internal unsafe <#=classType.Name#> Unpack(Interop.<#=classType.Name#> value)
		{
			return MarshalFrom(&value);
		}

		internal static unsafe <#=classType.Name#> MarshalFrom(Interop.<#=classType.Name#>* value)
		{
            var result = new <#=classType.Name#>();

<#
	foreach(var statement in classType.MarshalFromStatements)
	{
#>
			<#=statement#>
<#
	}
#>

			return result;
		}
<#
	}
#>
	}
<#
}
#>
}