<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Net" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file="..\License.tt" #>
<#@ include file="..\Vk.ttinclude" #>
using System;

namespace SharpVk.Interop
{
	public struct Bool32
	{
		private uint value;

		public Bool32(bool value)
		{
			this.value = value ? 1u : 0;
		}

		public static implicit operator Bool32(bool value)
		{
			return new Bool32(value);
		}

		public static implicit operator bool(Bool32 value)
		{
			return value.value != 0;
		}
	}

	public struct DeviceSize
	{
		private ulong value;

		public static implicit operator DeviceSize(ulong value)
		{
			return new DeviceSize { value = value };
		}

		public static implicit operator ulong(DeviceSize size)
		{
			return size.value;
		}
	}

	public struct SampleMask
	{
		private uint value;

		public static implicit operator SampleMask(uint value)
		{
			return new SampleMask { value = value };
		}

		public static implicit operator uint(SampleMask size)
		{
			return size.value;
		}
	}
<#
	foreach(var structType in GetStructs().Where(x => !x.IsSimpleStruct))
	{
		string structName = structType.Name;
#>

	public unsafe struct <#=structName#>
	{
<#
		var members = new List<string>();

		foreach(var member in structType.Members)
        {
			string memberTypeName = member.Type.Name;

			if(member.Type.Category == Category.funcpointer)
            {
				memberTypeName = "IntPtr";
            }
			else if(member.PointerCount > 0)
            {
				memberTypeName += new string('*', member.PointerCount);
            }

			if(member.Size == 0)
            {
				members.Add(string.Format("{0} {1}", memberTypeName, member.Name));
            }
			else
            {
				if(member.Type.IsPrimitive)
				{
					members.Add(string.Format("fixed {0} {1}[{2}]", memberTypeName, member.Name, member.Size));
				}
				else
				{
					for(int fieldIndex = 0;fieldIndex < member.Size;fieldIndex++)
					{
						members.Add(string.Format("{0} {1}{2}", memberTypeName, member.Name, fieldIndex == 0 ? "" : "_" + fieldIndex));
					}
				}
            }
        }

		foreach(var member in members)
        {
#>

		public <#=member#>;
<#
        }
#>
	}
<#
	}
#>
}