<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Net" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file=".\License.tt" #>
<#@ include file=".\Vk.ttinclude" #>
<#
var parser = GetParser();
var generator = new TypeGenerator();

var types = generator.Generate(parser.Run());

var subGroups = types.Constants.Select(x => x.SubGroupName).Distinct();

#>
using System.Linq;
using System.Reflection;

namespace SharpVk
{
<#
foreach(var subGroup in subGroups)
{
#>
    /// <summary>
    /// -
    /// </summary>
	public static class <#=subGroup ?? "Constants"#>
	{
<#
	foreach(var constant in types.Constants.Where(x => x.SubGroupName == subGroup))
	{
#>
	    /// <summary>
	    /// -
	    /// </summary>
		public <#if(constant.IsStaticReadonly) {#>static readonly<#} else {#>const<#}#> <#=constant.ExplicitType ?? GetTypeName(constant.Type)#> <#=constant.Name#> = <#=constant.Value#>;
<#
	}

	if(subGroup == null)
	{
#>
        /// <summary>
        /// The version of the SharpVk bindings.
        /// </summary>
        public static readonly Version SharpVkVersion = ExtractBindingVersion();

        private static Version ExtractBindingVersion()
        {
            var versionAttribute = typeof(Version).Assembly.GetCustomAttribute<AssemblyInformationalVersionAttribute>();
            string versionString = versionAttribute.InformationalVersion;

            int firstDecimalIndex = versionString.IndexOf('.');
            int secondDecimalIndex = versionString.IndexOf('.', firstDecimalIndex + 1);
            int terminatorIndex = versionString.Skip(secondDecimalIndex + 1).TakeWhile(char.IsDigit).Count() + secondDecimalIndex + 1;

            int major = int.Parse(versionString.Substring(0, firstDecimalIndex));
            int minor = int.Parse(versionString.Substring(firstDecimalIndex + 1, (secondDecimalIndex - firstDecimalIndex) - 1));
            int patch = int.Parse(versionString.Substring(secondDecimalIndex + 1, (terminatorIndex - secondDecimalIndex) - 1));

            return new Version(major, minor, patch);
        }
<#
	}
#>
	}
<#
}
#>
}